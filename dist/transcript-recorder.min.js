window.vorpleTranscriptRecorder = /* @__PURE__ */ (() => {
  let l = !1, s = null, r = !1, i = null, a = "", n = "", d = "";
  function o(e, t) {
    if (!l)
      return;
    const u = `Transcript recorder: ${e}`;
    t === "warn" || t === "error" ? console[t](u) : console.log(u);
  }
  function c() {
    i = (/* @__PURE__ */ new Date()).getTime().toString() + Math.ceil(Math.random() * 1e3).toString();
  }
  function p(e) {
    try {
      a = e;
    } catch (t) {
      console.error(t);
    }
    return e;
  }
  function f(e) {
    n += e;
  }
  async function g(e) {
    if (!r)
      return o("Plugin has been disabled, won't send data"), !1;
    if (!i)
      return o(
        "Session id has not been set, transcript recorder plugin has not been initialized?",
        "error"
      ), !1;
    if (!s)
      return o(
        "Can't send transcript data, endpoint URL has not been set",
        "error"
      ), !1;
    try {
      if (!(await fetch(s, {
        method: "POST",
        body: JSON.stringify(e),
        headers: {
          "Content-Type": "application/json"
        }
      })).ok)
        throw new Error(response.status);
    } catch (t) {
      return o(
        "Error sending transcript data: " + (t.message ?? t),
        "error"
      ), !1;
    }
    return !0;
  }
  function w() {
    const e = (/* @__PURE__ */ new Date()).getTime();
    g({
      sessionId: i,
      format: "simple",
      label: d,
      input: a,
      output: n,
      outtimestamp: e,
      timestamp: e
    }), a = "", n = "";
  }
  return {
    /**
     * Stops the transcript recording
     */
    disable: () => {
      r = !1, a = "", n = "";
    },
    /**
     * Resumes transcript recording
     */
    enable: () => {
      r = !0;
    },
    /**
     * Initialization function
     */
    init: (e) => {
      if (i) {
        o(
          "Transcript recorder: tried to initialize multiple times",
          "warn"
        );
        return;
      }
      if (typeof window.vorple != "object")
        throw new Error("Vorple has not been initialized");
      d = e, c(), vorple.addEventListener("expectCommand", w), vorple.prompt.addInputFilter(p), vorple.output.addOutputFilter(f), r = !0;
    },
    /**
     * Adds additional text to the transcript. Note that "normal" story output is already added to the transcript automatically.
     */
    insertText: (e) => {
      window.haven.buffer.flush(), n += e;
    },
    /**
     * Generates a new session id, which means future transcript data will be sent with the new id.
     * The recorder server considers the new id as part of a new play session.
     */
    restartSession: () => {
    },
    /**
     * Sets the recorder server URL where the data is sent
     */
    setEndpointUrl: (e) => s = e,
    /**
     * Is the recorder plugin enabled?
     */
    status: () => r,
    /**
     * Turns the debug mode on or off (pass true to turn on, false to turn off)
     */
    toggleDebugMode: (e) => l = e
  };
})();
